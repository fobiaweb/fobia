<?php
namespace Fobia\DataBase\Handler;

use Fobia\DataBase\Handler\MySQL;
use Fobia\DataBase\DbStatement;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-06-24 at 02:21:14.
 */
class MySQLTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Fobia\DataBase\Handler\MySQL
     */
    protected $db;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $dbParams = array(
            'database' => 'test',
            'username' => 'root',
            'password' => '',
            'host' => 'localhost',
            'charset' => 'utf8',
        );
        $this->db = new MySQL($dbParams);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Fobia\DataBase\Handler\MySQL::query
     * @todo   Implement testQuery().
     */
    public function testQuery()
    {
        $stmt = $this->db->query('SELECT VERSION()');
        $this->assertInstanceOf('\\Fobia\\DataBase\\DbStatement', $stmt);
    }

    /**
     * @covers Fobia\DataBase\Handler\MySQL::createInsertQuery
     * @todo   Implement testCreateInsertQuery().
     */
    public function testCreateInsertQuery()
    {
        $q = $this->db->createInsertQuery();
        $this->assertInstanceOf('\\ezcQueryInsert', $q);
        $this->assertInstanceOf('\\Fobia\\DataBase\\Query\\QueryInsert', $q);
    }

    /**
     * @covers Fobia\DataBase\Handler\MySQL::createReplaceQuery
     * @todo   Implement testCreateReplaceQuery().
     */
    public function testCreateReplaceQuery()
    {
        $q = $this->db->createReplaceQuery();
        $this->assertInstanceOf('\\ezcQueryInsert', $q);
        $this->assertInstanceOf('\\Fobia\\DataBase\\Query\\QueryReplace', $q);
    }


    public function testSelect()
    {
        $q = $this->db->createSelectQuery();
        $q->select('*')->from('test');
        $stmt  = $q->prepare();
        $this->assertInstanceOf('\\Fobia\\DataBase\\DbStatement', $stmt);
        $this->assertEquals('SELECT * FROM test', $stmt->queryString);


        $q = $this->db->createSelectQuery();
        $e = $q->expr;
        $q->select( '*' )->from( 'table' )
                ->where( $e->not($e->isNull('id')) )
//                ->where( $e->isNull('id') )
                         ->where( $e->eq( 'id', $e->not( 'null' ) ) );
        echo $q->getQuery();
    }
}
