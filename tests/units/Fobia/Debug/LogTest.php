<?php
namespace Fobia\Debug;


class MyLogger extends \Psr\Log\AbstractLogger
{
    public function log($level, $message, array $context = array())
    {
        echo "[$level] $message";
        // print_r($context);
    }
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-08 at 13:10:09.
 */
class LogTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Log
     */
    protected $log;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if (!$this->log) {
            $this->log = new MyLogger();
        }
        Log::setLogger($this->log);
    }

    /**
     * @covers Fobia\Debug\Log::setLogger
     * @todo   Implement testSetLogger().
     */
    public function testSetLogger()
    {
        Log::setLogger(new \Psr\Log\NullLogger());

        $log = Log::getLogger();
        $this->assertInstanceOf('\Psr\Log\NullLogger', $log);
    }

    /**
     * @covers Fobia\Debug\Log::getLogger
     * @todo   Implement testGetLogger().
     */
    public function testGetLogger()
    {
        $_level = @$_ENV['debug.level'];
        Log::$logger = null;
        $_ENV['debug.level'] = 0;

        $this->assertInstanceOf('\Psr\Log\LoggerInterface', Log::getLogger());
        $this->assertInstanceOf('\Fobia\Debug\ArrayLogger', Log::getLogger());
        $_ENV['debug.level'] = $_level;
    }

    /**
     * @covers Fobia\Debug\Log::emergency
     * @todo   Implement testEmergency().
     */
    public function testEmergency()
    {
        $this->expectOutputString('[emergency] message');
        Log::emergency("message");
    }

    /**
     * @covers Fobia\Debug\Log::alert
     * @todo   Implement testAlert().
     */
    public function testAlert()
    {
        $this->expectOutputString('[alert] message');
        Log::alert("message");
    }

    /**
     * @covers Fobia\Debug\Log::critical
     * @todo   Implement testCritical().
     */
    public function testCritical()
    {
        $this->expectOutputString('[critical] message');
        Log::critical("message");
    }

    /**
     * @covers Fobia\Debug\Log::error
     * @todo   Implement testError().
     */
    public function testError()
    {
        $this->expectOutputString('[error] message');
        Log::error("message");
    }

    /**
     * @covers Fobia\Debug\Log::warning
     * @todo   Implement testWarning().
     */
    public function testWarning()
    {
        $this->expectOutputString('[warning] message');
        Log::warning("message");
    }

    /**
     * @covers Fobia\Debug\Log::notice
     * @todo   Implement testNotice().
     */
    public function testNotice()
    {
        $this->expectOutputString('[notice] message');
        Log::notice("message");
    }

    /**
     * @covers Fobia\Debug\Log::info
     * @todo   Implement testInfo().
     */
    public function testInfo()
    {
        $this->expectOutputString('[info] message');
        Log::info("message");
    }

    /**
     * @covers Fobia\Debug\Log::debug
     * @todo   Implement testDebug().
     */
    public function testDebug()
    {
        $this->expectOutputString('[debug] message');
        Log::debug("message");
    }

    /**
     * @covers Fobia\Debug\Log::dump
     * @todo   Implement testDump().
     */
    public function testDump()
    {
        $this->expectOutputString("[debug] VarDump (test) ::\n# #message");
        Log::dump("message", "test");
    }

    /**
     * @covers Fobia\Debug\Log::log
     * @todo   Implement testLog().
     */
    public function testLog()
    {
        $this->expectOutputString('[info] message');
        Log::log("info", "message");
    }
}
