<?php

namespace Fobia\DataBase\Handler;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-07-24 at 06:40:13.
 */
class MySQLTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var \Fobia\DataBase\Handler\MySQL
     */
    protected $db;

    protected function setUp()
    {
        if (!$this->db) {
            $this->db = \Fobia\DataBase\DbFactory::create('mysql://root@localhost/mysql');
        }
    }


        public function testNewDatabase()
        {
            $this->assertInstanceOf("\Fobia\DataBase\Handler\MySQL", $this->db);
        }
        public function testNewDatabaseDebug()
        {
            $dbParams = array(
                'dns' => 'mysql://root@localhost/mysql',
                'params' => array( 'debug' => true )
            );
            $db = \Fobia\DataBase\DbFactory::create($dbParams);
            $this->assertInstanceOf("\Fobia\DataBase\Handler\MySQL", $db);
        }

        public function testNewDatabaseLogger()
        {
            $dbParams = array(
                'dns' => 'mysql://root@localhost/mysql',
                'params' => array(
                    'debug' => true ,
                    'logger' => new \Psr\Log\NullLogger()
                )
            );
            $db = \Fobia\DataBase\DbFactory::create($dbParams);
            $this->assertInstanceOf("\Fobia\DataBase\Handler\MySQL", $db);
        }


    /**
     * @covers Fobia\DataBase\Handler\MySQL::getProfiles
     * @todo   Implement testGetProfiles().
     */
    public function testGetProfilesCreate()
    {
        $dbParams = array(
            'dns' => 'mysql://root@localhost/mysql',
            'params' => array( )
        );
        $dbParams['params']['debug'] = true;
        $dbParams['params']['log_error'] = false;
        $dbParams['params']['logger'] = new \Psr\Log\NullLogger();
        $db = \Fobia\DataBase\DbFactory::create($dbParams);
        $this->assertInstanceOf("\Fobia\DataBase\Handler\MySQL", $db);
        return $db;
    }

    /**
     * @covers Fobia\DataBase\Handler\MySQL::getProfiles
     * @todo   Implement testGetProfiles().
     * @depends testGetProfilesCreate
     */
    public function testGetProfiles($db)
    {
        $db->query("SELECT VERSION()");
        $db->query("SELECT VERSION()");

        $arr = $db->getProfiles();
        $this->assertCount(2, $arr);
        $this->assertEquals('SELECT VERSION()', $arr[0]['query']);

        $this->assertCount(0, $this->db->getProfiles());
    }

    /**
     * @covers Fobia\DataBase\Handler\MySQL::query
     * @todo   Implement testQuery().
     */
    public function testQuery()
    {
        $db = $this->db;
        $stmt = $db->query("SELECT VERSION()");
        $this->assertInstanceOf('\Fobia\DataBase\DbStatement', $stmt);

        $row = $stmt->fetch();
        $v = array_shift($row);
        $this->assertRegExp("/^5\..+/", $v);
    }


    /**
     * @covers Fobia\DataBase\Handler\MySQL::log
     * @todo   Implement testLog().
     */
    public function testLog()
    {
        $logger = $this->db->log("SELECT VERSION()", microtime(true));
        $this->assertInstanceOf('\Psr\Log\LoggerInterface', $logger);
    }

    /**
     * @covers Fobia\DataBase\Handler\MySQL::getLogger
     * @todo   Implement testGetLogger().
     */
    public function testGetLogger()
    {
        $this->assertInstanceOf('\Psr\Log\LoggerInterface', $this->db->getLogger());
    }

    /**
     * @covers Fobia\DataBase\Handler\MySQL::createInsertQuery
     * @todo   Implement testCreateInsertQuery().
     */
    public function testCreateInsertQuery()
    {
        $q = $this->db->createInsertQuery();
        $this->assertInstanceOf('\Fobia\DataBase\Query\QueryInsert', $q);
    }

    /**
     * @covers Fobia\DataBase\Handler\MySQL::createReplaceQuery
     * @todo   Implement testCreateReplaceQuery().
     */
    public function testCreateReplaceQuery()
    {
        $q = $this->db->createReplaceQuery();
        $this->assertInstanceOf('\Fobia\DataBase\Query\QueryReplace', $q);
    }

    /**
     * @covers Fobia\DataBase\Handler\MySQL::createSelectQuery
     * @todo   Implement testCreateSelectQuery().
     */
    public function testCreateSelectQuery()
    {
        $q = $this->db->createSelectQuery();
        $this->assertInstanceOf('\Fobia\DataBase\Query\QuerySelect', $q);
    }


    public function testBeginTransaction()
    {
        $this->assertTrue($this->db->beginTransaction());
        return $this->db;
    }

    /**
     * @depends testBeginTransaction
     */
    public function testCommit($db)
    {
        $this->assertTrue($db->commit());
    }

    public function testRollback()
    {
        $this->db->beginTransaction();
        $this->assertTrue($this->db->rollback());

    }
}